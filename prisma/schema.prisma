// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categories {
  id Int @id @default(autoincrement())
  name String @unique
  imageUrl String
  parentId Int?
  products Products[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}


model Users {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  avatarUrl String?
  shop Shops[]
  addresses Addresses[]
  roles UserRoles[]
  carts Carts[]
  isDeleted Boolean @default(false)
  verifyToken String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shops {
  id Int @id @default(autoincrement())
  name String
  avatarUrl String?
  coverUrl String?
  description String?
  userId Int
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Products[]
  discounts Discounts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id Int @id @default(autoincrement())
  name String @unique
  users UserRoles[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRoles {
  userId Int
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId Int
  role Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([userId, roleId])
}

model Addresses {
  id Int @id @default(autoincrement())
  userId Int
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  name String
  phoneNumber String
  provinceCode String @db.VarChar(20)
  province Provinces @relation(fields: [provinceCode], references: [code])
  districtCode String @db.VarChar(20)
  district Districts @relation(fields: [districtCode], references: [code])
  wardCode String @db.VarChar(20)
  ward Wards @relation(fields: [wardCode], references: [code])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id Int @id @default(autoincrement())
  name String
  description String
  imageUrls String @db.Text
  price Float
  stock Int
  isDeleted Boolean @default(false)
  rating Float?
  slug String @unique
  shopId Int
  shop Shops @relation(fields: [shopId], references: [id])
  cartProducts CartProducts[]
  categoryId Int
  category Categories @relation(fields: [categoryId], references: [id])
  discountProducts DiscountProducts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Carts {
  id Int @id @default(autoincrement())
  userId Int @unique
  user Users @relation(fields: [userId], references: [id])
  cartProducts CartProducts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartProducts {
  id Int @id @default(autoincrement())
  cartId Int
  cart Carts @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product Products @relation(fields: [productId], references: [id])
  quantity Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([cartId, productId])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum DiscountAppliesTo {
  ALL
  SPECIFIC_PRODUCTS
}

model Discounts {
  id Int @id @default(autoincrement())
  shopId Int
  shop Shops @relation(fields: [shopId], references: [id])
  name String
  description String
  discountCode String @unique
  discountType DiscountType @default(FIXED)
  discountValue Float
  startDate DateTime
  endDate DateTime
  isDeleted Boolean @default(false)
  discountUsage Int @default(0)
  maxUsage Int
  minOrderAmount Float
  discountMaxUsePerUser Int
  usersUsedDiscount UsersUsedDiscount[]
  discountAppliesTo DiscountAppliesTo @default(ALL)
  discountProducts DiscountProducts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscountProducts {
  id Int @id @default(autoincrement())
  discountId Int
  discount Discounts @relation(fields: [discountId], references: [id])
  productId Int
  product Products @relation(fields: [productId], references: [id])
}

model UsersUsedDiscount {
  id Int @id @default(autoincrement())
  userId Int
  discountId Int
  discount Discounts @relation(fields: [discountId], references: [id])
  usageCount Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, discountId])
}


model AdministrativeRegions {
  id           Int         @id
  name         String      @db.VarChar(255)
  name_en      String      @db.VarChar(255)
  code_name    String?     @db.VarChar(255)
  code_name_en String?     @db.VarChar(255)
  provinces    Provinces[]
}

model AdministrativeUnits {
  id            Int         @id
  full_name     String?     @db.VarChar(255)
  full_name_en  String?     @db.VarChar(255)
  short_name    String?     @db.VarChar(255)
  short_name_en String?     @db.VarChar(255)
  code_name     String?     @db.VarChar(255)
  code_name_en  String?     @db.VarChar(255)
  districts     Districts[]
  provinces     Provinces[]
  wards         Wards[]
}


model Districts {
  code                   String                @id @db.VarChar(20)
  name                   String                @db.VarChar(255)
  name_en                String?               @db.VarChar(255)
  full_name              String?               @db.VarChar(255)
  full_name_en           String?               @db.VarChar(255)
  code_name              String?               @db.VarChar(255)
  province_code          String?               @db.VarChar(20)
  administrative_unit_id Int?
  administrative_units   AdministrativeUnits? @relation(fields: [administrative_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  provinces              Provinces?            @relation(fields: [province_code], references: [code], onDelete: NoAction, onUpdate: NoAction)
  wards                  Wards[]
  addresses              Addresses[]

  @@index([province_code], map: "idx_districts_province")
  @@index([administrative_unit_id], map: "idx_districts_unit")
}

model Provinces {
  code                     String                  @id @db.VarChar(20)
  name                     String                  @db.VarChar(255)
  name_en                  String?                 @db.VarChar(255)
  full_name                String                  @db.VarChar(255)
  full_name_en             String?                 @db.VarChar(255)
  code_name                String?                 @db.VarChar(255)
  administrative_unit_id   Int?
  administrative_region_id Int?
  districts                Districts[]
  administrative_regions   AdministrativeRegions? @relation(fields: [administrative_region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  administrative_units     AdministrativeUnits?   @relation(fields: [administrative_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addresses                Addresses[]

  @@index([administrative_region_id], map: "idx_provinces_region")
  @@index([administrative_unit_id], map: "idx_provinces_unit")
}


model Wards {
  code                   String                @id @db.VarChar(20)
  name                   String                @db.VarChar(255)
  name_en                String?               @db.VarChar(255)
  full_name              String?               @db.VarChar(255)
  full_name_en           String?               @db.VarChar(255)
  code_name              String?               @db.VarChar(255)
  district_code          String?               @db.VarChar(20)
  administrative_unit_id Int?
  administrative_units   AdministrativeUnits? @relation(fields: [administrative_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  districts              Districts?            @relation(fields: [district_code], references: [code], onDelete: NoAction, onUpdate: NoAction)
  addresses              Addresses[]

  @@index([district_code], map: "idx_wards_district")
  @@index([administrative_unit_id], map: "idx_wards_unit")
}