// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categories {
  id Int @id @default(autoincrement())
  name String @unique
  imageUrl String
  parentId Int?
  products Products[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}


model Users {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  avatarUrl String?
  shop Shops[]
  addresses Addresses[]
  roles UserRoles[]
  isDeleted Boolean @default(false)
  verifyToken String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shops {
  id Int @id @default(autoincrement())
  name String
  avatarUrl String?
  coverUrl String?
  description String?
  userId Int
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Products[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id Int @id @default(autoincrement())
  name String @unique
  users UserRoles[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRoles {
  userId Int
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId Int
  role Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([userId, roleId])
}

model Addresses {
  id Int @id @default(autoincrement())
  userId Int
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  address String
  city String
  state String
  country String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id Int @id @default(autoincrement())
  name String
  description String
  imageUrls String
  shopId Int
  shop Shops @relation(fields: [shopId], references: [id], onDelete: Cascade)
  categoryId Int
  category Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attributes ProductAttributes[]
  variants ProductVariants[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductAttributes {
  id Int @id @default(autoincrement())
  name String
  productId Int
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  values AttributeValues[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@unique([productId, name])
}

model AttributeValues {
  id Int @id @default(autoincrement())
  value String
  attributeId Int
  attribute ProductAttributes @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  variantValues VariantValues[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([attributeId, value])
}

model ProductVariants {
  id Int @id @default(autoincrement())
  price Float
  stock Int
  productId Int
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeValues VariantValues[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VariantValues {
  variantId Int
  variant ProductVariants @relation(fields: [variantId], references: [id], onDelete: Cascade)
  attributeValueId Int
  attributeValue AttributeValues @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)
  @@id([variantId, attributeValueId])
}